
inf_loop1:adapt0/3 :: ((#b_clause{segments::[{_,_,_}],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | {_,_,_,_,_,_}}},#hash_cons{tree::{integer(),'nil' | {_,_,_} | {_,_,_,_}},number::number()},_) -> {#clause_tree{instr::{_,_,_},success::[] | {_,_,_,_},fail::[] | {_,_,_,_}},_})
inf_loop1:adapt/3 :: (([] | #b_clause{segments::[{_,_,_}],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | {_,_,_,_,_,_}}},_,_) -> {[] | #clause_tree{instr::{_,_},success::{_,_,_,_},fail::[]},_})
inf_loop1:b_clause_segments/1 :: ((#b_clause{segments::[{_,_,_}],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | {_,_,_,_,_,_}}}) -> [{_,_,_}])
inf_loop1:choose_binseg/1 :: ((#b_clause{segments::[#match{}],next_clause::[] | #b_clause{segments::[{_,_,_}],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | {_,_,_,_,_,_}}}}) -> 'none' | #match{})
inf_loop1:get_all_similar_match/2 :: ((_,[] | #b_clause{segments::[any()],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | {_,_,_,_,_,_}}}}) -> {non_neg_integer(),'nil' | {_,'nil' | {_,'nil' | {_,_,_},'nil' | {_,_,_}},'nil' | {_,'nil' | {_,_,_},'nil' | {_,_,_}}}})
inf_loop1:get_all_similar_match/3 :: ((_,[] | #b_clause{segments::[any()],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | {_,_,_,_,_,_}}}},[#match{}]) -> [#match{}])
inf_loop1:get_largest_count/3 :: (([#match{}],{_,'nil' | {{_,_,_,_},pos_integer(),pos_integer()} | {_,_,_,_}},{'none' | #match{},_}) -> 'none' | #match{})
inf_loop1:get_match/3 :: ((_,[any()],[#match{}]) -> [#match{}])
inf_loop1:have_same_match/2 :: ((#match{},[#match{}]) -> bool())
inf_loop1:interference_conclusion_neg/5 :: ((_,_,_,_,_) -> 'fails' | 'no_info')
inf_loop1:interference_conclusion_pos/5 :: ((_,_,_,_,_) -> 'fails' | 'no_info' | 'succeeds')
inf_loop1:make_search_key/2 :: ((_,_) -> {_,_})
inf_loop1:match/3 :: ((#match{},maybe_improper_list(),_) -> bool())
inf_loop1:match_tag/1 :: ((#match{}) -> any())
inf_loop1:match_val/1 :: ((#match{}) -> any())
inf_loop1:mismatch/3 :: ((#match{},maybe_improper_list(),_) -> 'true' | [any()])
inf_loop1:mismatch/4 :: ((#match{},maybe_improper_list(),[any()],_) -> 'true' | [any()])
inf_loop1:remove_fail_match/3 :: ((#match{},[] | #b_clause{segments::maybe_improper_list(),next_clause::[] | #b_clause{segments::maybe_improper_list(),next_clause::[] | #b_clause{segments::maybe_improper_list(),next_clause::[] | {_,_,_,_,_,_}}}},_) -> [] | #b_clause{segments::maybe_improper_list(),next_clause::[] | #b_clause{segments::maybe_improper_list(),next_clause::[] | {_,_,_,_,_,_}}})
inf_loop1:remove_succ_match/3 :: ((#match{},[] | #b_clause{segments::maybe_improper_list(),next_clause::[] | #b_clause{segments::maybe_improper_list(),next_clause::[] | #b_clause{segments::maybe_improper_list(),next_clause::[] | {_,_,_,_,_,_}}}},_) -> [] | #b_clause{segments::[any()],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | {_,_,_,_,_,_}}})
inf_loop1:simpl_count/1 :: (([] | #b_clause{segments::[#match{}],next_clause::[] | #b_clause{segments::[{_,_,_}],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | {_,_,_,_,_,_}}}}) -> {_,'nil' | {{_,_,_,_},pos_integer(),pos_integer()} | {_,_,_,_}})
inf_loop1:simpl_count/2 :: (([] | #b_clause{segments::[#match{}],next_clause::[] | #b_clause{segments::[{_,_,_}],next_clause::[] | #b_clause{segments::[any()],next_clause::[] | {_,_,_,_,_,_}}}},{_,'nil' | {{_,_,_,_},pos_integer(),pos_integer()} | {_,_,_,_}}) -> {_,'nil' | {{_,_,_,_},pos_integer(),pos_integer()} | {_,_,_,_}})
inf_loop1:simpl_count_segs/2 :: (([#match{}],{_,'nil' | {{_,_,_,_},pos_integer(),pos_integer()} | {_,_,_,_}}) -> {_,'nil' | {{_,_,_,_},pos_integer(),pos_integer()} | {_,_,_,_}})
